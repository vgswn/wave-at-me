{"version":3,"sources":["index.js","App.js"],"names":["ReactDOM","render","useState","currentAccount","setCurrentAccount","waversList","setWaversList","useEffect","a","async","window","ethereum","console","log","request","method","accounts","length","account","error","checkIfWalletIsConnected","refreshWavers","contractABI","abi","provider","ethers","providers","Web3Provider","signer","getSigner","wavePortalContract","Contract","getAllWavers","waverAddress","waversCount","wavers","i","address","count","parseInt","_hex","className","href","onClick","wave","waveTxn","hash","wait","alert","column","Object","keys","map","data","key","v","document","getElementById"],"mappings":"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","file":"static/js/main.f24cc875.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","import React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport './App.css';\nimport abi from \"./utils/WavePortal.json\";\n\n\nexport default function App() {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n\n  const [waversList, setWaversList] = useState([]);\n\n  const checkIfWalletIsConnected = async () => {\n\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n      } else {\n        console.log(\"We have the ethereum object\", ethereum);\n      }\n      const accounts = await ethereum.request({ method: \"eth_accounts\" });\n      console.log(accounts);\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account)\n      } else {\n        console.log(\"No authorized account found\")\n      }\n\n    } catch (error) {\n      console.error(error);\n    }\n\n  }\n\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n      const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  useEffect(() => {\n    checkIfWalletIsConnected()\n  }, [])\n\n  useEffect(() => {\n    refreshWavers()\n  }, [])\n\n  const wave = async () => {\n    try {\n      const { ethereum } = window;\n      const contractAddress = '0x468125E63368aE35358F650032B22f85606Bd21f';\n      const contractABI = abi.abi;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        const waveTxn = await wavePortalContract.wave();\n        console.log(\"Mining...\", waveTxn.hash);\n\n        await waveTxn.wait();\n        console.log(\"Mined -- \", waveTxn.hash);\n        refreshWavers();\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\n  const refreshWavers = async () => {\n    try {\n      const { ethereum } = window;\n      const contractAddress = '0x468125E63368aE35358F650032B22f85606Bd21f';\n      const contractABI = abi.abi;\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n        const [waverAddress, waversCount] = await wavePortalContract.getAllWavers();\n        const wavers = []\n        for (let i = 0; i < waverAddress.length; i++) {\n          wavers[i] = {\n            address: waverAddress[i],\n            count: parseInt(waversCount[i]._hex)\n          }\n        }\n        setWaversList(wavers);\n        console.log(waversList);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  function DynamicTable() {\n    if (waversList.length === 0) {\n      return (<div></div>);\n    }\n    // get table column\n    const column = Object.keys(waversList[0]);\n    // get table heading data\n    const ThData = () => {\n\n      return column.map((data) => {\n        return <th key={data}>{data}</th>\n      })\n    }\n    // get table row data\n    const tdData = () => {\n\n      return waversList.map((data) => {\n        return (\n          <tr>\n            {\n              column.map((v) => {\n                return <td>{data[v]}</td>\n              })\n            }\n          </tr>\n        )\n      })\n    }\n\n    return (\n      <table className=\"table\">\n        <thead>\n          <tr>{ThData()}</tr>\n        </thead>\n        <tbody>\n          {tdData()}\n        </tbody>\n      </table>\n    )\n  }\n\n\n  return (\n    <div>\n      <div className=\"mainContainer\">\n\n        <div className=\"dataContainer\">\n          <div className=\"header\">\n            ðŸ‘‹ Hey there!\n          </div>\n\n          <div className=\"bio\">\n            I am Vipul. Connect your Ethereum wallet and wave at me!\n            {'\\n'}\n            <a href=\"https://www.linkedin.com/in/vgswn/\">\n                <br/>Connect with me on linkedin\n            </a>\n          </div>\n\n          <button className=\"waveButton\" onClick={wave}>\n            Wave at Me\n          </button>\n\n          {!currentAccount && (\n            <button className=\"waveButton\" onClick={connectWallet}>\n              Connect Wallet\n            </button>\n          )}\n\n          <button className=\"refreshButton\" onClick={refreshWavers}>\n            Refresh\n          </button>\n        </div>\n      </div>\n      {<DynamicTable />}\n    </div>\n  );\n}\n"],"sourceRoot":""}